/***
 *
 * This Is A Java CUP Specification For CSX-lite, a Small Subset
 * of The CSX Language, used In CS536
 * Extend this specification to handle all of CSX.
 *
 ***/

/* Preliminaries to set up and use the scanner.  */

import java_cup.runtime.*;
parser code {:
 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),  
			null);
     }
:};
init with {:              :};
scan with {: return Scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal CSXIdentifierToken     IDENTIFIER; 
terminal CSXIntLitToken			INTLIT;
terminal CSXToken     			SEMI, LPAREN, RPAREN, ASG, LBRACE, RBRACE;
terminal CSXToken     			PLUS, MINUS, EQ, NOTEQ, rw_IF;
terminal CSXToken     			rw_INT, rw_BOOL;
//Custom below
terminal CSXToken				rw_CLASS, COR, LBRACKET, GEQ, rw_FALSE, SLASH, rw_ELSE;
terminal CSXToken				GT, CAND, rw_CONST, LT, rw_WHILE, rw_FOR, rw_CHAR, LEQ; 
terminal CSXToken				rw_TRUE, RBRACKET, rw_CONTINUE, COLON, rw_PRINT, INCREMENT, DECREMENT, AND, OR;
terminal CSXToken				rw_RETURN, rw_READ, rw_VOID, TIMES, COMMA, NOT, rw_BREAK;
//Classes below
terminal CSXBitStringToken      INT_BITSTR;
terminal CSXCharLitToken        CHARLIT;
terminal CSXStringLitToken      STRLIT;

/* Non terminals */
non terminal classNode   	 	prog;  
non terminal stmtsOption     	stmts;  
non terminal stmtNode	     	stmt;
non terminal exprNode			exp;
non terminal exprNode			unit; 
non terminal identNode	     	ident;
non terminal fieldDeclsOption	fielddecls; 
non terminal declNode			fielddecl;
non terminal typeNode			type;
non terminal Symbol		     	optionalSemi;
non terminal intLitNode		    intliteral;
non terminal nameNode			name;
non terminal charLitNode		charliteral;
non terminal strLitNode			stringliteral;
non terminal bitStringNode		bitstringliteral;
non terminal trueNode			trueliteral;
non terminal falseNode			falseliteral;
non terminal memberDeclsNode	memberdecls;
non terminal methodDeclsOption	methoddecls;
non terminal methodDeclNode		methoddecl;
non terminal argsNode			args;
non terminal exprNode			unary;
non terminal exprNode			pri;
non terminal argDeclsNode		argdecls;
non terminal argDeclNode		argdecl;
non terminal voidTypeNode		void;
non terminal exprNode			factor;
non terminal exprNode			term;
non terminal printNode			printlist;
non terminal readNode           readlist;




start with prog;

prog		
			::= rw_CLASS:c ident:id LBRACE:l memberdecls:md RBRACE
			{: RESULT = new classNode(id, md, c.linenum, c.colnum); :}
			;

memberdecls	
			::=	fielddecl:f1 memberdecls:mem {: fieldDeclsNode f1FDN = 
						new fieldDeclsNode(f1, mem.fields, f1.linenum, f1.colnum); 
						RESULT = new memberDeclsNode(f1FDN, mem.methods,
                        f1FDN.linenum, f1FDN.colnum); :}
            | methoddecls:m1
            	{: RESULT = new memberDeclsNode( fieldDeclsNode.NULL, m1, m1.linenum, m1.colnum ); :}
            ;
            
fielddecls
   			 ::=   fielddecl:f1 fielddecls:f2 
				 {: RESULT=
					new fieldDeclsNode(f1,f2, f1.linenum,f1.colnum); :}	
   			 |
				 {: RESULT=
					fieldDeclsNode.NULL; :}	
    		;
    		
methoddecls
			::= methoddecl:m1 methoddecls:m2 
			{: RESULT = new methodDeclsNode(m1, m2, m1.linenum, m1.colnum); :}
			|
			{: RESULT = methodDeclsNode.NULL; :}
			;
optionalSemi
   			::= SEMI
   		 	|
   		 	;

methoddecl
			::= rw_VOID:v ident:i LPAREN RPAREN LBRACE fielddecls:fd stmts:st RBRACE optionalSemi
			{: RESULT = new methodDeclNode(i, argDeclsNode.NULL,new voidTypeNode(v.linenum, v.colnum),fd,st,v.linenum,v.colnum); :}
			|
			rw_VOID:v ident:i LPAREN argdecls:arg RPAREN LBRACE fielddecls:fd stmts:st RBRACE optionalSemi
			{: RESULT = new methodDeclNode(i, arg, new voidTypeNode(v.linenum, v.colnum), fd, st, v.linenum, v.colnum); :}
			|
			type:ty ident:i LPAREN RPAREN LBRACE fielddecls:fd stmts:st RBRACE optionalSemi
			{: RESULT = new methodDeclNode(i, argDeclsNode.NULL, ty, fd, st, ty.linenum, ty.colnum); :}
			|
			type:ty ident:i LPAREN argdecls:arg RPAREN LBRACE fielddecls:fd stmts:st RBRACE optionalSemi
			{: RESULT = new methodDeclNode(i, arg, ty, fd, st, ty.linenum, ty.colnum); :}
			;
			
argdecls
			::=argdecl:arg COMMA argdecls:args
			{: RESULT = new argDeclsNode(arg, args, arg.linenum, arg.colnum); :}
			|
			argdecl:arg
			{: RESULT = new argDeclsNode(arg, argDeclsNode.NULL, arg.linenum, arg.colnum); :}
			;
			
argdecl
			::= type:ty ident:i
			{: RESULT = new valArgDeclNode(i,ty,ty.linenum,ty.colnum); :}
			|
			type:ty ident:i LBRACKET RBRACKET
			{: RESULT = new arrayArgDeclNode(i, ty, ty.linenum, ty.colnum); :}
			;
fielddecl
   			::= type:t ident:i SEMI 
			{: RESULT = new varDeclNode(i,t,exprNode.NULL, t.linenum,t.colnum); :}
			|
			type:t ident:i ASG exp:e SEMI
			{: RESULT = new varDeclNode(i, t, e, t.linenum, t.colnum); :}
			|
			type:t ident:i LBRACKET intliteral:intLit RBRACKET SEMI
			{: RESULT = new arrayDeclNode(i, t, intLit, t.linenum, t.colnum); :}
			|
			rw_CONST:c ident:i ASG exp:e SEMI
			{: RESULT = new constDeclNode(i, e, c.linenum, c.colnum); :}
    		;
    		
stmts		
			::= stmt:s1  stmts:s2
			{: RESULT= new stmtsNode(s1,s2,s1.linenum,s1.colnum); :}	
			| 
			{: RESULT= stmtsNode.NULL; :} 
			;
stmt		
			::= rw_IF:i LPAREN exp:e RPAREN  stmt:s
			{:
			RESULT=new ifThenNode(e,s, i.linenum,i.colnum); :}				
			|   
			rw_IF:i LPAREN exp:e RPAREN stmt:stm rw_ELSE:el stmt:stm2
			{: RESULT = new ifThenNode(e, stm, stm2, i.linenum, i.colnum); :}
			|
			rw_WHILE:w LPAREN exp:e RPAREN stmt:stm
			{: RESULT = new whileNode( exprNode.NULL, e, stm, w.linenum, w.colnum); :}
			|
			ident:id COLON rw_WHILE:w LPAREN exp:e RPAREN stmt:stm
            {: RESULT = new whileNode( id, e, stm, w.linenum, w.colnum); :}
            |
			rw_FOR:f LPAREN SEMI SEMI RPAREN stmt:stm
            {: RESULT = new forNode(exprNode.NULL, new varDeclNode(), exprNode.NULL,
             exprNode.NULL, false, stm,f.linenum, f.colnum); :}
            |
            ident:id COLON rw_FOR:f LPAREN SEMI SEMI RPAREN stmt:stm
            {: RESULT = new forNode(id, new varDeclNode(), exprNode.NULL, exprNode.NULL,
             false, stm, f.linenum, f.colnum); :}
            |
            rw_FOR:f LPAREN fielddecl:fd exp:e2 SEMI name:id2 INCREMENT RPAREN stmt:stm
            {: RESULT = new forNode(exprNode.NULL, fd, e2, id2, true, stm, f.linenum, f.colnum); :}
            |
            rw_FOR:f LPAREN fielddecl:fd exp:e2 SEMI name:id2 DECREMENT RPAREN stmt:stm
            {: RESULT = new forNode(exprNode.NULL, fd, e2, id2, false, stm, f.linenum, f.colnum); :}
            |
            ident:i COLON rw_FOR:f LPAREN fielddecl:fd exp:e2 SEMI name:id2 INCREMENT RPAREN stmt:stm
            {: RESULT = new forNode(i, fd, e2, id2, true, stm, f.linenum, f.colnum); :}
            |
            ident:i COLON rw_FOR:f LPAREN fielddecl:fd exp:e2 SEMI name:id2 DECREMENT RPAREN stmt:stm
            {: RESULT = new forNode(i, fd, e2, id2, false, stm, f.linenum, f.colnum); :}
            |
			name:id ASG exp:e SEMI
			{: RESULT=
			new asgNode(id,e,id.linenum,id.colnum);
			:}	
			|
			name:id INCREMENT SEMI
			{: RESULT = new incrementNode(id, id.linenum, id.colnum); :}
			|
			name:id DECREMENT SEMI
			{: RESULT = new decrementNode(id, id.linenum, id.colnum); :}
			| 
			rw_READ:r LPAREN readlist:rl RPAREN SEMI
			{: RESULT = rl; :}
			|
			rw_PRINT:p LPAREN printlist:pl RPAREN SEMI
			{: RESULT = pl; :}
			|
			ident:i LPAREN RPAREN SEMI
			{: RESULT = new callNode(i, argsNode.NULL, i.linenum, i.colnum); :}
			| 
			ident:i LPAREN args:arg RPAREN SEMI
			{: RESULT = new callNode(i, arg, i.linenum, i.colnum); :}
			|
			rw_RETURN:r SEMI
			{: RESULT = new returnNode( exprNode.NULL, r.linenum, r.colnum); :}
			|
			rw_RETURN:r exp:exp SEMI
			{: RESULT = new returnNode( exp, r.linenum, r.colnum); :}
			|
			rw_BREAK:b ident:i SEMI
			{: RESULT = new breakNode(i, b.linenum, b.colnum); :}
			|
			rw_CONTINUE:c ident:i SEMI
			{: RESULT = new continueNode(i, c.linenum, c.colnum); :}
			|
			LBRACE:l fielddecls:f stmts:s RBRACE optionalSemi
	 		{:	 RESULT=new blockNode(f,s, l.linenum, l.colnum); :}	
			;
type
   			 ::= rw_INT:t
	 			{:
	  				 RESULT=new intTypeNode(t.linenum, t.colnum);
         		:}	
             |  rw_CHAR:t
                {: 
                     RESULT=new charTypeNode(t.linenum, t.colnum);
                :}
    		 |   rw_BOOL:t
				 {:
	  				 RESULT=new boolTypeNode(t.linenum, t.colnum);
         		:}	
    		; 
args
			::= exp:e COMMA args:a
				{: RESULT=new argsNode(e, a, e.linenum, e.colnum); :}
			|	exp:e
				{: RESULT=new argsNode(e, argsNodeOption.NULL, e.linenum, e.colnum); :}
			;
readlist
        ::= name:n COMMA readlist:r 
                {: RESULT=new readNode(n, r, n.linenum, n.linenum); :}
        | name:n
                {: RESULT=new readNode(n, readNodeOption.NULL, n.linenum, n.linenum); :}
        ;
printlist
		::= exp:e COMMA printlist:p
			  {: RESULT=new printNode(e, p, e.linenum, e.colnum); :}  
		| exp:e
			  {: RESULT=new printNode(e, printNodeOption.NULL, e.linenum, e.colnum); :}
		;
exp		
		::= exp:leftval COR term:rightval
			 {: RESULT=new binaryOpNode(leftval,sym.COR,rightval,leftval.linenum,leftval.colnum); :}	
		| exp:leftval CAND term:rightval
			 {: RESULT=new binaryOpNode(leftval,sym.CAND,rightval,leftval.linenum,leftval.colnum); :}
		| exp:leftval OR term:rightval
			 {: RESULT=new binaryOpNode(leftval,sym.OR,rightval,leftval.linenum,leftval.colnum); :}	
		| exp:leftval AND term:rightval
			 {: RESULT=new binaryOpNode(leftval,sym.AND,rightval,leftval.linenum,leftval.colnum); :}
		| term:t
			{: RESULT = t; :}
		;
term
		::= factor:leftval LT factor:rightval
			  {: RESULT = new binaryOpNode(leftval, sym.LT, rightval, leftval.linenum, leftval.colnum); :}
		| factor:leftval GT factor:rightval
			  {: RESULT = new binaryOpNode(leftval, sym.GT, rightval, leftval.linenum, leftval.colnum); :}
		| factor:leftval LEQ factor:rightval
			  {: RESULT = new binaryOpNode(leftval, sym.LEQ, rightval, leftval.linenum, leftval.colnum); :}
		| factor:leftval GEQ factor:rightval
			  {: RESULT = new binaryOpNode(leftval, sym.GEQ, rightval, leftval.linenum, leftval.colnum); :}
		| factor:leftval EQ factor:rightval
			  {: RESULT = new binaryOpNode(leftval, sym.EQ, rightval, leftval.linenum, leftval.colnum); :}
		| factor:leftval NOTEQ factor:rightval
			  {: RESULT = new binaryOpNode(leftval, sym.NOTEQ, rightval, leftval.linenum, leftval.colnum); :}
		| factor:f
			  {: RESULT = f; :}
		;
factor
		::=	factor:f PLUS pri:p
			  {: RESULT = new binaryOpNode(f, sym.PLUS, p, f.linenum, p.linenum); :}
		| factor:f MINUS pri:p
			  {: RESULT = new binaryOpNode(f, sym.MINUS, p, f.linenum, p.linenum); :}
		| pri:p
			  {: RESULT = p; :}
		;	
pri
		::= pri:p TIMES unary:u
			  {: RESULT=new binaryOpNode(p, sym.TIMES, u, p.linenum, p.colnum); :}
		| pri:p SLASH unary:u
			  {: RESULT=new binaryOpNode(p, sym.SLASH, u, p.linenum, p.colnum); :}
		| unary:u
			  {: RESULT=u; :}
		;
unary
		::=	NOT	unary:u
			  {: RESULT=new unaryOpNode(sym.NOT, u, u.linenum, u.colnum); :}
		| LPAREN type:t RPAREN unary:u
			  {: RESULT=new castNode(t, u, t.linenum, t.colnum); :}
		| unit:u
			  {: RESULT = u; :}
		;
unit    ::=	name:n
			  {: RESULT = n; :}	
		|	ident:i LPAREN RPAREN
			  {: RESULT = new fctCallNode(i, argsNodeOption.NULL, i.linenum, i.colnum); :}
		|	ident:i LPAREN args:a RPAREN
			  {: RESULT=new fctCallNode(i, a, i.linenum, i.colnum); :}
		|   intliteral:l
	  		  {: RESULT = l; :}
	  	|   charliteral:l
	  		  {: RESULT = l; :}
	    |   stringliteral:l
	  		  {: RESULT = l; :}
	  	|   bitstringliteral:l
	  		  {: RESULT = l; :}
	  	|   trueliteral:l
	  		  {: RESULT = l; :}
	  	|   falseliteral:l
	  		  {: RESULT = l; :}
	    |   LPAREN exp:e RPAREN 
	   	      {: RESULT = e; :}
		;
name	::=
		   ident:i		
			 {: RESULT = new nameNode(i, i.linenum, i.colnum); :}
		|  ident:i LBRACKET exp:e RBRACKET
		   	 {: RESULT = new nameNode(i, e, i.linenum, i.colnum); :}
		;
ident		::= IDENTIFIER:i
			 {: RESULT = new identNode(i.identifierText,
									   i.linenum,i.colnum); :}	
		;	
intliteral
   ::= INTLIT:i
	 {: RESULT = new intLitNode(i.intValue, i.linenum,i.colnum);
         :}	
    ;
charliteral
   ::= CHARLIT:c
	 {: RESULT = new charLitNode(c.charValue, c.linenum,c.colnum);
         :}	
    ;
stringliteral	
   ::= STRLIT:s
   	 {: RESULT = new strLitNode(s.stringText, s.linenum,s.colnum);
         :}	
    ;
bitstringliteral
   ::= INT_BITSTR:i
	 {: RESULT = new bitStringNode(i.intValue, i.bitString, i.linenum,i.colnum);
         :}	
    ;
trueliteral
   ::= rw_TRUE:t
   	 {: RESULT = new trueNode(t.linenum, t.colnum); :}
   ;
falseliteral
   ::= rw_FALSE:f
   	 {: RESULT = new falseNode(f.linenum, f.colnum); :}
   ;
   